pipeline {
    agent any
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '20')
    }
    triggers {
         pollSCM 'H/3 * * * *'
    }
    stages {
        stage('CODE CHECKOUT') {
			steps {
				checkout scm: [$class: 'SubversionSCM',
				filterChangelog: false,
				ignoreDirPropChanges: false,
				locations: [[cancelProcessOnExternalsFail: false,
				credentialsId: '01c7d5da-ad5b-4dbb-a717-a5d737ea95bb',
				depthOption: 'infinity',
				ignoreExternalsOption: false,
				local: '.',
				remote: '${APPLICATION_REPOSITORY}']],
				quietOperation: false,
				workspaceUpdater: [$class: 'UpdateUpdater']]
				
				checkout poll: false, scm: [$class: 'GitSCM', 
				branches: [[name: '*/ansible']], 
				extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ansible']], 
				userRemoteConfigs: [[credentialsId: 'Sreejith-github',
				url: 'https://github.com/pv-project-devops/track-configuration.git']]]
			}
        }
		stage('BUILD AND UPLOAD ARTIFACTS') {
		    steps {
		        withGradle {
    		        bat './gradlew clean build'
    		    }
    		    rtGradleResolver (
    		        id: 'resolver-artifactory',
                    serverId: 'artifactory'
    		    )
    		    rtGradleDeployer (
    		        id: 'deployer-artifactory',
                    serverId: 'artifactory',
                    releaseRepo: 'libs-release-local',
                    snapshotRepo: 'libs-snapshot-local'
    		    )
    		    rtGradleRun (
    		        usesPlugin: true,
    		        useWrapper: true,
    		        tasks: 'artifactoryPublish',
    		        resolverId: 'resolver-artifactory',
                    deployerId: 'deployer-artifactory'
    		    )
		    }
		}
    }
    post {
        failure {
            step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: 'sreejith.m@pvgroup.be', sendToIndividuals: true])
        }
        success {
		    archiveArtifacts '**/build/dist/*.war'
		    script {
                downstream_param()
		    }
        }
    }
}

def downstream_param() {
	def f = readJSON file: "build/build-info.json"
	def path = f.modules[0].id
	def groupId = path.split(":")[0].replace(".","/")
	def application = path.split(":")[1]
	def snapshot = path.split(":")[2]
	def repo = f.modules[0].repository
	def artifactPath = f.modules.artifacts[0].path[0]
	if(repo == "libs-snapshot-local") {
		String artifactory =  "http://artifacts.pvgroup.intranet/artifactory/${repo}/${groupId}/${application}/${snapshot}/maven-metadata.xml"
		bat "py ansible/alfresco.py ${artifactory}"
		def props = readProperties file: 'URL'
		env.URL_PATH = props.URL
		echo "${URL_PATH}"
	}
	else {
		env.URL_PATH = "http://artifacts.pvgroup.intranet/artifactory/${repo}/${artifactPath}"
	}
	build job: '${DOWNSTREAM_JOB}', 
	parameters: [string(name: 'ARTIFACTORY_URL', value: "${URL_PATH}")], 
    wait: false
}
